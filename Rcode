# CORES DOS AMBIENTES
# Com roxo e marrom (chao de pinus)
#"#66A61E" (verde)
#"#745086" (roxo)
#"#B28269" (marrom)

# Nova paleta de cores
#"#2DBF81" (verde)
#"#812DBF" (roxo)
#"#BF812D" (marrom)

# LIMPA A AREA DE TRABALHO
remove(list = ls())

# REMOVE A NOTACAO CIENTIFICA
options(scipen = 999)

# OBTEM RESULTADOS REPRODUZIVEIS
set.seed(397068565) # numero gerado com o comando: sample(1:.Machine$integer.max, 1)

# DEFINE A AREA DE TRABALHO
#setwd("C:/Users/anderson/OneDrive/Documents/Pesquisa/Projetos/Projeto_FLORESTAS/Projeto_FLORESTAS_Aves/meta-analise")

# CARREGA OS PACOTES
library(stringr)
library(janitor)
library(readxl)
library(ggplot2)
library(iNEXT)
library(rgeos)
library(rgdal)
library(ggstats)


###############################################
### ORGANIZA OS DADOS DE ZURITA ET AL. 2006 ###
###############################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/unpublished_data_Zurita2006.txt"

# IMPORTA OS DADOS
zurita = read.table(url, sep = "\t", header = TRUE)

# REMOVE LINHAS E COLUNAS EM BRANCO
zurita = remove_empty(zurita, which = c("rows", "cols"), quiet = FALSE) # 1 coluna removida

# REMOVE DADOS CONSTANTES
remove_constant(zurita, quiet = FALSE) # Nao ha dados constantes

# ISOLA DADOS DUPLICADOS
get_dupes(zurita) # Nao ha dados duplicados

# TRANSFORMA TIBBLE EM DATA.FRAME
zurita = as.data.frame(zurita)

# SEPARA OS CONJUNTOS DE DADOS LOCAL E REGIONAL
zurita_local = zurita[, 5:8]
zurita_regional = zurita[, 1:4]

### LOCAL ###
# RENOMEIA AS COLUNAS
# REMOVE A PRIMEIRA LINHA, POIS O NOME DAS COLUNAS JA ESTA NO CABECALHO
# MUDA A ORDEM DAS COLUNAS
colnames(zurita_local) = c("species", "araucaria_plantation", "pine_plantation", "natural_forest")
zurita_local = zurita_local[-1, ]
zurita_local = zurita_local[, c(1, 4, 2, 3)]

### REGIONAL ###
# RENOMEIA AS COLUNAS
# REMOVE A PRIMEIRA LINHA, POIS O NOME DAS COLUNAS JA ESTA NO CABECALHO
# MUDA A ORDEM DAS COLUNAS
colnames(zurita_regional) = c("species", "araucaria_plantation", "pine_plantation", "natural_forest")
zurita_regional = zurita_regional[-1, ]
zurita_regional = zurita_regional[, c(1, 4, 2, 3)]

# ARRUMA O NOME DAS ESPECIES
zurita_local$species = str_to_sentence(str_squish(zurita_local$species))
zurita_regional$species = str_to_sentence(str_squish(zurita_regional$species))

# TRANSFORMA NUMEROS PARA A CLASSE INTEGER
zurita_local$natural_forest = as.integer(zurita_local$natural_forest)
zurita_local$araucaria_plantation = as.integer(zurita_local$araucaria_plantation)
zurita_local$pine_plantation = as.integer(zurita_local$pine_plantation)

zurita_regional$natural_forest = as.integer(zurita_regional$natural_forest)
zurita_regional$araucaria_plantation = as.integer(zurita_regional$araucaria_plantation)
zurita_regional$pine_plantation = as.integer(zurita_regional$pine_plantation)

# REMOVE AS ESPECIES SEM REGISTRO DE OCORRENCIA
zurita_local = zurita_local[rowSums(zurita_local[, -1]) > 0, ]
zurita_regional = zurita_regional[rowSums(zurita_regional[, -1]) > 0, ]

# ATUALIZA O NOME DAS ESPECIES
# IMPORTA A LISTA DE AVES PUBLICADA EM ZURITA ET AL. 2006
zurita_spp = read.table("https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Zurita2006.txt",
                        sep = "\t", header = TRUE)
zurita_spp = word(zurita_spp$Species, 1, 2)

### LOCAL ###
# CRIA UMA COLUNA COM OS NOMES DAS ESPECIES CONFORME PUBLICADO EM ZURITA ET AL. 2006
zurita_local$species_paper = zurita_spp[match(zurita_local$species, zurita_spp)]

# NOMES NAO ENCONTRADOS
zurita_local_spp_not_found = zurita_local$species[is.na(zurita_local$species_paper)]
cbind(zurita_local_spp_not_found)

# ARRUMA OS NOMES NAO ENCONTRADOS CONFORME PUBLICADO EM ZURITA ET AL. 2006
zurita_local$species_paper[zurita_local$species == "Cissops leveriana"] = "Cissopis leveriana"
zurita_local$species_paper[zurita_local$species == "Mack leac"] = "Mackenziaena leachii"
zurita_local$species_paper[zurita_local$species == "Odontophorus capuerira"] = "Odontophorus capueira"
zurita_local$species_paper[zurita_local$species == "Tytira inquisitor"] = "Tityra inquisitor"

# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps = read.table("https://raw.githubusercontent.com/buenoas/tree_plantations/main/lista_potencial_especies_por_area.txt",
                      sep = "\t", header = TRUE)
spp_maps_zurita = spp_maps$species[spp_maps$Urugua.i == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
zurita_local$species_paper[which(is.na(match(zurita_local$species_paper, spp_maps_zurita)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
zurita_local$birdlife = zurita_local$species_paper
zurita_local$birdlife[zurita_local$species_paper == "Aratinga leucophthalma"] = "Psittacara leucophthalmus" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
zurita_local$birdlife[zurita_local$species_paper == "Basileuterus leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Buteo magnirostris"] = "Rupornis magnirostris" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Carduelis magellanica"] = "Spinus magellanicus" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Chlorostilbon aureoventris"] = "Chlorostilbon lucidus" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Cissopis leveriana"] = "Cissopis leverianus" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Columba cayennensis"] = "Patagioenas cayennensis" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Columba picazuro"] = "Patagioenas picazuro" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Lathotriccus euleri"] = "Lathrotriccus euleri" # spelling
zurita_local$birdlife[zurita_local$species_paper == "Megarhynchus pitangua"] = "Megarynchus pitangua" # spelling
zurita_local$birdlife[zurita_local$species_paper == "Myiodynastes maculatus"] = "Myiodynastes solitarius" # distribution
zurita_local$birdlife[zurita_local$species_paper == "Phylloscartes eximius"] = "Pogonotriccus eximius" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Platyrhynchus mystaceus"] = "Platyrinchus mystaceus" # spelling
zurita_local$birdlife[zurita_local$species_paper == "Platysaris rufus"] = "Pachyramphus validus" # correction made based on the species English name
zurita_local$birdlife[zurita_local$species_paper == "Poospiza lateralis"] = "Microspingus cabanisi" # synonym
zurita_local$birdlife[zurita_local$species_paper == "Scytalopus speluncae"] = "Scytalopus pachecoi" # distribution
zurita_local$birdlife[zurita_local$species_paper == "Thraupis sayaca"] = "Tangara sayaca" # synonym

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
zurita_local$birdlife[is.na(match(zurita_local$birdlife, spp_maps_zurita))] # Tudo certo

# PREPARA OS DADOS PARA AS ANALISES DE RAREFACAO
rownames(zurita_local) = zurita_local$birdlife # especies como nomes das linhas
zurita_local = zurita_local[, 2:4] # seleciona so as colunas relevantes
zurita_local = zurita_local[order(rownames(zurita_local)), ] # linhas em ordem alfabetica

# ADICIONA O NOME DO DATASET
zurita_local$datasetID = "Zurita2006loc"

# VISUALIZA A ESTRUTURA DOS DADOS
head(zurita_local)


### REGIONAL ###
# CRIA UMA COLUNA COM OS NOMES DAS ESPECIES CONFORME PUBLICADO EM ZURITA ET AL. 2006
zurita_spp_code = paste(str_sub(word(zurita_spp, 1), 1, 4),
                        str_sub(word(zurita_spp, 2), 1, 4))
zurita_regional$species_paper = zurita_spp[match(zurita_regional$species, zurita_spp_code)]

# NOMES NAO ENCONTRADOS
zurita_regional_spp_not_found = zurita_regional$species[is.na(zurita_regional$species_paper)]
cbind(zurita_regional_spp_not_found)

# CRIA UM VETOR COM UM CODIGO PARA OS NOMES DA BIRDLIFE
# CODIGO NECESSARIO PARA DAR O MATCH
birdlife_code = paste(str_sub(word(spp_maps_zurita, 1), 1, 4),
                      str_sub(word(spp_maps_zurita, 2), 1, 4))

# CRIA UMA COLUNA COM OS NOMES DAS ESPECIES ATUALIZADOS
zurita_regional$birdlife = spp_maps_zurita[match(zurita_regional$species, birdlife_code)]

# NOMES NAO ENCONTRADOS
zurita_regional_spp_not_found = zurita_regional$species[is.na(zurita_regional$birdlife)]
zurita_regional_spp_not_found

# RENOMEIA AS ESPECIES NAO ENCONTRADAS
zurita_regional$birdlife[zurita_regional$species == "Amaz vers"] = "Chrysuronia versicolor"
zurita_regional$birdlife[zurita_regional$species == "Arat leuc"] = "Psittacara leucophthalmus"
zurita_regional$birdlife[zurita_regional$species == "Basi culi"] = "Basileuterus auricapilla"
zurita_regional$birdlife[zurita_regional$species == "Basi leuc"] = "Myiothlypis leucoblephara"
zurita_regional$birdlife[zurita_regional$species == "Bute magn"] = "Rupornis magnirostris"
zurita_regional$birdlife[zurita_regional$species == "Camp leuc"] = "Campephilus leucopogon"
zurita_regional$birdlife[zurita_regional$species == "Card mage"] = "Spinus magellanicus"
zurita_regional$birdlife[zurita_regional$species == "Cery torq"] = "Megaceryle torquata"
zurita_regional$birdlife[zurita_regional$species == "Chlo aure"] = "Chlorostilbon lucidus"
zurita_regional$birdlife[zurita_regional$species == "Chlor amaz"] = "Chloroceryle amazona"
zurita_regional$birdlife[zurita_regional$species == "Colu caye"] = "Patagioenas cayennensis"
zurita_regional$birdlife[zurita_regional$species == "Colu pica"] = "Patagioenas picazuro"
zurita_regional$birdlife[zurita_regional$species == "Cyan chri"] = "Cyanocorax chrysops"
zurita_regional$birdlife[zurita_regional$species == "Drom phasi"] = "Dromococcyx phasianellus"
zurita_regional$birdlife[zurita_regional$species == "Drym ferr"] = "Drymophila rubricollis"
zurita_regional$birdlife[zurita_regional$species == "Dryo line"] = "Hylatomus lineatus"
zurita_regional$birdlife[zurita_regional$species == "Geot fren"] = "Geotrygon montana"
zurita_regional$birdlife[zurita_regional$species == "Hab rub"] = "Habia rubica"
zurita_regional$birdlife[zurita_regional$species == "Hypod guta"] = "Hypoedaleus guttatus"
zurita_regional$birdlife[zurita_regional$species == "Lato eule"] = "Lathrotriccus euleri"
zurita_regional$birdlife[zurita_regional$species == "Leph seta"] = "Leptasthenura setaria"
zurita_regional$birdlife[zurita_regional$species == "Mica semi"] = "Micrastur semitorquatus"
zurita_regional$birdlife[zurita_regional$species == "Miyo macu"] = "Myiodynastes solitarius"
zurita_regional$birdlife[zurita_regional$species == "Myia swas"] = "Myiarchus swainsoni"
zurita_regional$birdlife[zurita_regional$species == "Pachy cast"] = "Pachyramphus castaneus"
zurita_regional$birdlife[zurita_regional$species == "Paru piti"] = "Setophaga pitiayumi"
zurita_regional$birdlife[zurita_regional$species == "Pene super"] = "Penelope superciliaris"
zurita_regional$birdlife[zurita_regional$species == "Pyri leu"] = "Pyriglena leucoptera"
zurita_regional$birdlife[zurita_regional$species == "Pyrr ruf"] = "Thlypopsis pyrrhocoma"
zurita_regional$birdlife[zurita_regional$species == "Scap oryz"] = "Molothrus oryzivorus"
zurita_regional$birdlife[zurita_regional$species == "Sita gris"] = "Sittasomus griseicapillus"
zurita_regional$birdlife[zurita_regional$species == "Syna fron"] = "Synallaxis frontalis"
zurita_regional$birdlife[zurita_regional$species == "Syna rufo"] = "Synallaxis ruficapilla"
zurita_regional$birdlife[zurita_regional$species == "Synd ruf"] = "Syndactyla rufosuperciliata"
zurita_regional$birdlife[zurita_regional$species == "Tachi coro"] = "Tachyphonus coronatus"
zurita_regional$birdlife[zurita_regional$species == "Thra saya"] = "Tangara sayaca"
zurita_regional$birdlife[zurita_regional$species == "Tity caya"] = "Tityra braziliensis"
zurita_regional$birdlife[zurita_regional$species == "Todi plum"] = "Poecilotriccus plumbeiceps"

# CORRIGE A IDENTIFICACAO DE UMA ESPECIES
# Tyrannus savana passa a ser Tityra inquisitor
zurita_regional$birdlife[zurita_regional$species == "Tyra sava"] = "Tityra inquisitor"

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA REGIAO DE ESTUDO
zurita_regional$birdlife[is.na(match(zurita_regional$birdlife, spp_maps_zurita))]
# A distribuicao de Campephilus leucopogon e Synallaxis frontalis esta proxima da regiao de estudo e ocorrem na Argentina
# Entao o registro dessas duas especies deve estar correto

# PREPARA OS DADOS PARA AS ANALISES DE RAREFACAO
rownames(zurita_regional) = zurita_regional$birdlife # especies como nomes das linhas
zurita_regional = zurita_regional[, 2:4] # seleciona so as colunas relevantes
zurita_regional = zurita_regional[order(rownames(zurita_regional)), ] # linhas em ordem alfabetica

# ADICIONA O NOME DO DATASET
zurita_regional$datasetID = "Zurita2006reg"

# VISUALIZA A ESTRUTURA DOS DADOS
head(zurita_regional)


##########################################
### ORGANIZA OS DADOS DE AMARANTE 2023 ###
##########################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Amarante2023.txt"

# IMPORTA OS DADOS
amarante = read.table(url, sep = "\t", header = TRUE)

# PASSA A COLUNA COM O NOMES DAS ESPECIES PARA AS LINHAS
rownames(amarante) = amarante$Especies

# REMOVE AS COLUNAS DESNECESSARIAS
amarante$Especies = NULL
amarante$Total.Geral = NULL

# RENOMEIA AS COLUNAS
colnames(amarante) = c("natural_forest",
                       "araucaria_plantation",
                       "pine_plantation")

# VISUALIZA A ESTRUTURA DOS DADOS
head(amarante)

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_amarante = spp_maps$species[spp_maps$Passo.Fundo == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
rownames(amarante)[which(is.na(match(rownames(amarante), spp_maps_amarante)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
amarante$birdlife = rownames(amarante)
amarante$birdlife[rownames(amarante) == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
amarante$birdlife[rownames(amarante) == "Dendroma rufa"] = "Philydor rufum" # synonym
amarante$birdlife[rownames(amarante) == "Lepidocolaptes squamatus"] = "Lepidocolaptes falcinellus" # distribution
amarante$birdlife[rownames(amarante) == "Myiodynastes maculatus"] = "Myiodynastes solitarius" # distribution
amarante$birdlife[rownames(amarante) == "Schiffornis turdina"] = "Schiffornis virescens" # distribution
amarante$birdlife[rownames(amarante) == "Stilpnia preciosa"] = "Tangara preciosa" # synonym
amarante$birdlife[rownames(amarante) == "Xenops rutilans"] = "Xenops rutilus" # synonym

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
amarante$birdlife[which(is.na(match(amarante$birdlife, spp_maps_amarante)))]

# ATUALIZA O NOME DAS LINHAS COM O NOME CORRIGIDO DAS ESPECIES
rownames(amarante) = amarante$birdlife

# REMOVE A COLUNA birdlife
amarante$birdlife = NULL

# ORDENA AS LINHAS ALFABETICAMENTE
amarante = amarante[order(rownames(amarante)), ]

# ADICIONA O NOME DO DATASET
amarante$datasetID = "Amarante2023"

# VISUALIZA A ESTRUTURA DOS DADOS
head(amarante)


#########################################
### ORGANIZA OS DADOS DE FONSECA 2003 ###
#########################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Fonseca2003.txt"

# IMPORTA OS DADOS
fonseca = read.table(url, sep = "\t", header = TRUE)

# PASSA A COLUNA COM O NOMES DAS ESPECIES PARA AS LINHAS
rownames(fonseca) = fonseca$Especie

# REMOVE AS COLUNAS DESNECESSARIAS
fonseca$Especie = NULL
fonseca$Familia = NULL
fonseca$Guilda = NULL
fonseca$PE = NULL

# CONVERTE NA EM ZERO
fonseca[is.na(fonseca)] = 0

# RENOMEIA AS COLUNAS
colnames(fonseca) = c("natural_forest",
                      "araucaria_plantation",
                      "pine_plantation")

# VISUALIZA A ESTRUTURA DOS DADOS
head(fonseca)

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_fonseca = spp_maps$species[spp_maps$Sao.Francisco.de.Paula == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
rownames(fonseca)[which(is.na(match(rownames(fonseca), spp_maps_fonseca)))]

# REMOVE A ESPECIE EXOTICA
fonseca = fonseca[-which(rownames(fonseca) == "Passer domesticus"), ]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
fonseca$birdlife = rownames(fonseca)
fonseca$birdlife[rownames(fonseca) == "Chlorostilbon aureoventris"] = "Chlorostilbon lucidus" # synonym
fonseca$birdlife[rownames(fonseca) == "Cyanocorax caeruleus"] = "Cyanocorax coeruleus" # spelling
fonseca$birdlife[rownames(fonseca) == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
fonseca$birdlife[rownames(fonseca) == "B. leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
fonseca$birdlife[rownames(fonseca) == "Elaenia sp."] = "Elaenia mesoleuca" # correction made based on the species vernacular name
fonseca$birdlife[rownames(fonseca) == "Poospiza lateralis"] = "Microspingus cabanisi" # synonym
fonseca$birdlife[rownames(fonseca) == "Troglodytes musculus"] = "Troglodytes aedon" # synonym
fonseca$birdlife[rownames(fonseca) == "Colaptes campestris"] = "Colaptes campestroides" # distribution
fonseca$birdlife[rownames(fonseca) == "Verniliostris spilogaster"] = "Veniliornis spilogaster" # spelling
fonseca$birdlife[rownames(fonseca) == "Thraupis sayaca"] = "Tangara sayaca" # synonym

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
fonseca$birdlife[which(is.na(match(fonseca$birdlife, spp_maps_fonseca)))]

# ATUALIZA O NOME DAS LINHAS COM O NOME CORRIGIDO DAS ESPECIES
rownames(fonseca) = fonseca$birdlife

# REMOVE A COLUNA birdlife
fonseca$birdlife = NULL

# ORDENA AS LINHAS ALFABETICAMENTE
fonseca = fonseca[order(rownames(fonseca)), ]

# ADICIONA O NOME DO DATASET
fonseca$datasetID = "Fonseca2003"

# VISUALIZA A ESTRUTURA DOS DADOS
head(fonseca)


#########################################
### ORGANIZA OS DADOS DE VOLPATO 2010 ###
#########################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Volpato2010.txt"

# IMPORTA OS DADOS
volpato = read.table(url, sep = "\t", header = TRUE)

# PASSA A COLUNA COM O NOMES DAS ESPECIES PARA AS LINHAS
rownames(volpato) = volpato$Species

# REMOVE AS COLUNAS DESNECESSARIAS
volpato$Species = NULL
volpato$Habitat = NULL
volpato$Feeding = NULL
volpato$Strata = NULL
volpato$G.test = NULL

# CONVERTE NA EM ZERO
volpato[is.na(volpato)] = 0

# RENOMEIA AS COLUNAS
colnames(volpato) = c("natural_forest",
                      "araucaria_plantation",
                      "pine_plantation")

# VISUALIZA A ESTRUTURA DOS DADOS
head(volpato)

# CONVERTE O INDICE PONTUAL DE ABUNDANCIA EM NUMERO DE INDIVIDUOS
volpato$natural_forest = round(volpato$natural_forest * 1293 / sum(volpato$natural_forest))
volpato$araucaria_plantation = round(volpato$araucaria_plantation * 839 / sum(volpato$araucaria_plantation))
volpato$pine_plantation = round(volpato$pine_plantation * 864 / sum(volpato$pine_plantation))

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_volpato = spp_maps$species[spp_maps$Irati == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
rownames(volpato)[which(is.na(match(rownames(volpato), spp_maps_volpato)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
volpato$birdlife = rownames(volpato)
volpato$birdlife[rownames(volpato) == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
volpato$birdlife[rownames(volpato) == "Basileuterus leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
volpato$birdlife[rownames(volpato) == "Cranioleuca pallida"] = "Cranioleuca obsoleta" # distribution # CONFIRMAR
volpato$birdlife[rownames(volpato) == "Cyanocompsa brissonii"] = "Cyanoloxia brissonii" # synonym
volpato$birdlife[rownames(volpato) == "Cyanocorax caeruleus"] = "Cyanocorax coeruleus" # spelling
volpato$birdlife[rownames(volpato) == "Dryocopus galeatus"] = "Celeus galeatus" # synonym
volpato$birdlife[rownames(volpato) == "Dryocopus lineatus"] = "Hylatomus lineatus" # synonym
volpato$birdlife[rownames(volpato) == "Lepidocolaptes squamatus"] = "Lepidocolaptes falcinellus" # distribution # CONFIRMAR
volpato$birdlife[rownames(volpato) == "Leucocloris albicollis"] = "Leucochloris albicollis" # spelling
volpato$birdlife[rownames(volpato) == "Mackenziaena leachi"] = "Mackenziaena leachii" # spelling
volpato$birdlife[rownames(volpato) == "Megarhynchus pitangua"] = "Megarynchus pitangua" # spelling
volpato$birdlife[rownames(volpato) == "Myiodinastes maculatus"] = "Myiodynastes solitarius" # distribution
volpato$birdlife[rownames(volpato) == "Parula pitiayumi"] = "Setophaga pitiayumi" # synonym
volpato$birdlife[rownames(volpato) == "Philydor lichtensteini"] = "Anabacerthia lichtensteini" # synonym
volpato$birdlife[rownames(volpato) == "Picumnus temmincki"] = "Picumnus temminckii" # spelling
volpato$birdlife[rownames(volpato) == "Poospiza lateralis"] = "Microspingus cabanisi" # synonym
volpato$birdlife[rownames(volpato) == "Pyrrhocoma ruficeps"] = "Thlypopsis pyrrhocoma" # synonym
volpato$birdlife[rownames(volpato) == "Ramphastos dicoloru"] = "Ramphastos dicolorus" # spelling
volpato$birdlife[rownames(volpato) == "Scytalopus indigoticus"] = "Eleoscytalopus indigoticus" # synonym
volpato$birdlife[rownames(volpato) == "Synallaxis spixii"] = "Synallaxis spixi" # spelling
volpato$birdlife[rownames(volpato) == "Tangara peruviana"] = "Tangara preciosa" # distribution # CONFIRMAR
volpato$birdlife[rownames(volpato) == "Thraupis sayaca"] = "Tangara sayaca" # synonym
volpato$birdlife[rownames(volpato) == "Tityra cayana"] = "Tityra braziliensis" # distribution
volpato$birdlife[rownames(volpato) == "Troglodytes musculus"] = "Troglodytes aedon" # synonym
volpato$birdlife[rownames(volpato) == "Xenops rutilians"] = "Xenops rutilus" # synonym
volpato$birdlife[rownames(volpato) == "Xyphocolaptes albicollis"] = "Xiphocolaptes albicollis" # spelling

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
volpato$birdlife[which(is.na(match(volpato$birdlife, spp_maps_volpato)))]

# ATUALIZA O NOME DAS LINHAS COM O NOME CORRIGIDO DAS ESPECIES
rownames(volpato) = volpato$birdlife

# REMOVE A COLUNA birdlife
volpato$birdlife = NULL

# ORDENA AS LINHAS ALFABETICAMENTE
volpato = volpato[order(rownames(volpato)), ]

# ADICIONA O NOME DO DATASET
volpato$datasetID = "Volpato2010"

# VISUALIZA A ESTRUTURA DOS DADOS
head(volpato)


#######################################
### ORGANIZA OS DADOS DE ROSSI 2015 ###
#######################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Rossi2015.txt"

# IMPORTA OS DADOS
rossi = read.table(url, sep = "\t", header = TRUE)

# REMOVE O AUTOR E O ANO DO NOME DAS ESPECIES
rossi$Especies = word(rossi$Especies, 1, 2)

# PASSA A COLUNA COM O NOMES DAS ESPECIES PARA AS LINHAS
rownames(rossi) = rossi$Especies

# REMOVE AS COLUNAS DESNECESSARIAS
rossi$Especies = NULL
rossi$Estrato = NULL
rossi$Guilda = NULL
rossi$Sensibilidade = NULL
rossi$Habito = NULL
rossi$Teste.G = NULL
rossi$p = NULL

# SUBSTITUI VIRGULA POR PONTO
rossi$FN = as.numeric(gsub(",", "\\.", rossi$FN))
rossi$PN = as.numeric(gsub(",", "\\.", rossi$PN))
rossi$PE = as.numeric(gsub(",", "\\.", rossi$PE))

# CONVERTE NA EM ZERO
rossi[is.na(rossi)] = 0

# RENOMEIA AS COLUNAS
colnames(rossi) = c("natural_forest",
                    "araucaria_plantation",
                    "pine_plantation")

# VISUALIZA A ESTRUTURA DOS DADOS
head(rossi)

# CONVERTE O INDICE PONTUAL DE ABUNDANCIA EM NUMERO DE INDIVIDUOS
rossi$natural_forest = round(rossi$natural_forest * 1124 / sum(rossi$natural_forest))
rossi$araucaria_plantation = round(rossi$araucaria_plantation * 970 / sum(rossi$araucaria_plantation))
rossi$pine_plantation = round(rossi$pine_plantation * 923 / sum(rossi$pine_plantation))

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_rossi = spp_maps$species[spp_maps$Tres.Barras == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
rownames(rossi)[which(is.na(match(rownames(rossi), spp_maps_rossi)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
rossi$birdlife = rownames(rossi)
rossi$birdlife[rownames(rossi) == "Urubitinga urubitinga"] = "Buteogallus urubitinga" # synonym
rossi$birdlife[rownames(rossi) == "Dryocopus lineatus"] = "Hylatomus lineatus" # synonym
rossi$birdlife[rownames(rossi) == "Xenops rutilans"] = "Xenops rutilus" # synonym
rossi$birdlife[rownames(rossi) == "Tityra cayana"] = "Tityra braziliensis" # distribution
rossi$birdlife[rownames(rossi) == "Myiodynastes maculatus"] = "Myiodynastes solitarius" # distribution
rossi$birdlife[rownames(rossi) == "Cyanocorax caeruleus"] = "Cyanocorax coeruleus" # spelling
rossi$birdlife[rownames(rossi) == "Troglodytes musculus"] = "Troglodytes aedon" # synonym
rossi$birdlife[rownames(rossi) == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
rossi$birdlife[rownames(rossi) == "Pyrrhocoma ruficeps"] = "Thlypopsis pyrrhocoma" # synonym
rossi$birdlife[rownames(rossi) == "Poospiza cabanisi"] = "Microspingus cabanisi" # synonym

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
rossi$birdlife[which(is.na(match(rossi$birdlife, spp_maps_rossi)))]

# ATUALIZA O NOME DAS LINHAS COM O NOME CORRIGIDO DAS ESPECIES
rownames(rossi) = rossi$birdlife

# REMOVE A COLUNA birdlife
rossi$birdlife = NULL

# ORDENA AS LINHAS ALFABETICAMENTE
rossi = rossi[order(rownames(rossi)), ]

# ADICIONA O NOME DO DATASET
rossi$datasetID = "Rossi2015"

# VISUALIZA A ESTRUTURA DOS DADOS
head(rossi)


####################################################
### ORGANIZA OS DADOS DE PRESTES 2003 (MIST NET) ###
####################################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Prestes2003mn.txt"

# IMPORTA OS DADOS
prestes_mn = read.table(url, sep = "\t", header = TRUE)

# PASSA A COLUNA COM O NOMES DAS ESPECIES PARA AS LINHAS
rownames(prestes_mn) = prestes_mn$Especies

# REMOVE AS COLUNAS DESNECESSARIAS
prestes_mn$Especies = NULL
prestes_mn$Total.C = NULL
prestes_mn$Total.R = NULL
prestes_mn$MN1.R = NULL
prestes_mn$MN2.R = NULL
prestes_mn$FA1.R = NULL
prestes_mn$FA2.R = NULL
prestes_mn$FP1.R = NULL
prestes_mn$FP2.R = NULL

# SOMA AS CAPTURAS POR TIPO FLORESTAL
prestes_mn$natural_forest = prestes_mn$MN1.C + prestes_mn$MN2.C
prestes_mn$araucaria_plantation = prestes_mn$FA1.C + prestes_mn$FA2.C
prestes_mn$pine_plantation = prestes_mn$FP1.C + prestes_mn$FP2.C

# REMOVE AS COLUNAS DESNECESSARIAS
prestes_mn$MN1.C = NULL
prestes_mn$MN2.C = NULL
prestes_mn$FA1.C = NULL
prestes_mn$FA2.C = NULL
prestes_mn$FP1.C = NULL
prestes_mn$FP2.C = NULL

# VISUALIZA A ESTRUTURA DOS DADOS
head(prestes_mn)

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_prestes_mn = spp_maps$species[spp_maps$Passo.Fundo == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
rownames(prestes_mn)[which(is.na(match(rownames(prestes_mn), spp_maps_prestes_mn)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
prestes_mn$birdlife = rownames(prestes_mn)
prestes_mn$birdlife[rownames(prestes_mn) == "Buteo magnirostris"] = "Rupornis magnirostris" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Stephanoxis lalandi"] = "Stephanoxis loddigesii" # distribution
prestes_mn$birdlife[rownames(prestes_mn) == "Chorostilbon aureoventris"] = "Chlorostilbon lucidus" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Lepidocolaptes squamatus"] = "Lepidocolaptes falcinellus" # distribution
prestes_mn$birdlife[rownames(prestes_mn) == "Xenops rutilans"] = "Xenops rutilus" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Tityra cayana"] = "Tityra braziliensis" # distribution
prestes_mn$birdlife[rownames(prestes_mn) == "Myiodynastes maculatus"] = "Myiodynastes solitarius" # distribution
prestes_mn$birdlife[rownames(prestes_mn) == "Empidonax euleri"] = "Lathrotriccus euleri" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Todirostrum plumbeiceps"] = "Poecilotriccus plumbeiceps" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Phyllomyas fasciatus"] = "Phyllomyias fasciatus" # spelling
prestes_mn$birdlife[rownames(prestes_mn) == "Phylloscartes eximius"] = "Pogonotriccus eximius" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Cyanocorax caeruleus"] = "Cyanocorax coeruleus" # spelling
prestes_mn$birdlife[rownames(prestes_mn) == "Turdus nigriceps"] = "Turdus subalaris" # distribution
prestes_mn$birdlife[rownames(prestes_mn) == "Parula pitiayumi"] = "Setophaga pitiayumi" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
prestes_mn$birdlife[rownames(prestes_mn) == "Basileuterus leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Pyrrhocoma ruficeps"] = "Thlypopsis pyrrhocoma" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Cyanocompsa brissonii"] = "Cyanoloxia brissonii" # synonym
prestes_mn$birdlife[rownames(prestes_mn) == "Poospiza lateralis"] = "Microspingus cabanisi" # synonym

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
prestes_mn$birdlife[which(is.na(match(prestes_mn$birdlife, spp_maps_prestes_mn)))]

# ATUALIZA O NOME DAS LINHAS COM O NOME CORRIGIDO DAS ESPECIES
rownames(prestes_mn) = prestes_mn$birdlife

# REMOVE A COLUNA birdlife
prestes_mn$birdlife = NULL

# ORDENA AS LINHAS ALFABETICAMENTE
prestes_mn = prestes_mn[order(rownames(prestes_mn)), ]

# ADICIONA O NOME DO DATASET
prestes_mn$datasetID = "Prestes2003mn"

# VISUALIZA A ESTRUTURA DOS DADOS
head(prestes_mn)


#######################################################
### ORGANIZA OS DADOS DE PRESTES 2003 (POINT COUNT) ###
#######################################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/published_data_Prestes2003pc.txt"

# IMPORTA OS DADOS
prestes_pc = read.table(url, sep = "\t", header = TRUE)

# PASSA A COLUNA COM O NOMES DAS ESPECIES PARA AS LINHAS
rownames(prestes_pc) = prestes_pc$Especies

# REMOVE AS COLUNAS DESNECESSARIAS
prestes_pc$X = NULL
prestes_pc$Especies = NULL
prestes_pc$FO.MN1 = NULL
prestes_pc$FO.MN2 = NULL
prestes_pc$FO.FA1 = NULL
prestes_pc$FO.FA2 = NULL
prestes_pc$FO.PF1 = NULL
prestes_pc$FO.PF2 = NULL
prestes_pc$Status = NULL

# SUBSTITUI VIRGULA POR PONTO
prestes_pc$IPA.MN1 = as.numeric(gsub(",", "\\.", prestes_pc$IPA.MN1))
prestes_pc$IPA.MN2 = as.numeric(gsub(",", "\\.", prestes_pc$IPA.MN2))
prestes_pc$IPA.FA1 = as.numeric(gsub(",", "\\.", prestes_pc$IPA.FA1))
prestes_pc$IPA.FA2 = as.numeric(gsub(",", "\\.", prestes_pc$IPA.FA2))
prestes_pc$IPA.PF1 = as.numeric(gsub(",", "\\.", prestes_pc$IPA.PF1))
prestes_pc$IPA.PF2 = as.numeric(gsub(",", "\\.", prestes_pc$IPA.PF2))

# CONVERTE NA EM ZERO
prestes_pc[is.na(prestes_pc)] = 0

# CONVERTE O INDICE PONTUAL DE ABUNDANCIA EM NUMERO DE INDIVIDUOS
prestes_pc$IPA.MN1 = round(prestes_pc$IPA.MN1 * 3373 / sum(prestes_pc$IPA.MN1))
prestes_pc$IPA.MN2 = round(prestes_pc$IPA.MN2 * 3698 / sum(prestes_pc$IPA.MN2))
prestes_pc$IPA.FA1 = round(prestes_pc$IPA.FA1 * 2883 / sum(prestes_pc$IPA.FA1))
prestes_pc$IPA.FA2 = round(prestes_pc$IPA.FA2 * 3028 / sum(prestes_pc$IPA.FA2))
prestes_pc$IPA.PF1 = round(prestes_pc$IPA.PF1 * 2952 / sum(prestes_pc$IPA.PF1))
prestes_pc$IPA.PF2 = round(prestes_pc$IPA.PF2 * 3206 / sum(prestes_pc$IPA.PF2))

# SOMA  POR TIPO FLORESTAL
prestes_pc$natural_forest = prestes_pc$IPA.MN1 + prestes_pc$IPA.MN2
prestes_pc$araucaria_plantation = prestes_pc$IPA.FA1 + prestes_pc$IPA.FA2
prestes_pc$pine_plantation = prestes_pc$IPA.PF1 + prestes_pc$IPA.PF2

# REMOVE AS COLUNAS DESNECESSARIAS
prestes_pc$IPA.MN1 = NULL
prestes_pc$IPA.MN2 = NULL
prestes_pc$IPA.FA1 = NULL
prestes_pc$IPA.FA2 = NULL
prestes_pc$IPA.PF1 = NULL
prestes_pc$IPA.PF2 = NULL

# VISUALIZA A ESTRUTURA DOS DADOS
head(prestes_pc)

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_prestes_pc = spp_maps$species[spp_maps$Passo.Fundo == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
rownames(prestes_pc)[which(is.na(match(rownames(prestes_pc), spp_maps_prestes_pc)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
prestes_pc$birdlife = rownames(prestes_pc)
prestes_pc$birdlife[rownames(prestes_pc) == "Buteo magnirostris"] = "Rupornis magnirostris" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Milvago chimango"] = "Phalcoboenus chimango" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Polyborus plancus"] = "Caracara plancus" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Columba picazuro"] = "Patagioenas picazuro" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Caprimulgus rufus"] = "Antrostomus rufus" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Hydropsalis brasiliana"] = "Hydropsalis torquata" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Stephanoxis lalandi"] = "Stephanoxis loddigesii" # distribution
prestes_pc$birdlife[rownames(prestes_pc) == "Chlorostilbon aureoventris"] = "Chlorostilbon lucidus" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Ceryle torquata"] = "Megaceryle torquata" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Dryocopus lineatus"] = "Hylatomus lineatus" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Lepidocolaptes squamatus"] = "Lepidocolaptes falcinellus" # distribution
prestes_pc$birdlife[rownames(prestes_pc) == "Philydor rufus"] = "Philydor rufum" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Xenops rutilans"] = "Xenops rutilus" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Machenzianea leachii"] = "Mackenziaena leachii" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Atilla phoenicurus"] = "Attila phoenicurus" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Tityra cayana"] = "Tityra braziliensis" # distribution
prestes_pc$birdlife[rownames(prestes_pc) == "Myiodynastes maculatus"] = "Myiodynastes solitarius" # distribution
prestes_pc$birdlife[rownames(prestes_pc) == "Empidonax euleri"] = "Lathrotriccus euleri" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Todirostrum plumbeiceps"] = "Poecilotriccus plumbeiceps" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Camptostoma obsotetum"] = "Camptostoma obsoletum" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Phyllomyas virescens"] = "Phyllomyias virescens" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Phyllomyas fasciatus"] = "Phyllomyias fasciatus" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Phyllomyas burmeisteri"] = "Phyllomyias burmeisteri" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Phylloscartes eximius"] = "Pogonotriccus eximius" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Notiochelidon cyanoleuca"] = "Pygochelidon cyanoleuca" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Cyanocorax caeruleus"] = "Cyanocorax coeruleus" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Cacicus chysopterus"] = "Cacicus chrysopterus" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Parula pitiayumi"] = "Setophaga pitiayumi" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
prestes_pc$birdlife[rownames(prestes_pc) == "Basileuterus leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Thraupis sayaca"] = "Tangara sayaca" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Pyrrhocoma ruficeps"] = "Thlypopsis pyrrhocoma" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Basileuterus leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Saltator aurantirostris"] = "Saltator aurantiirostris" # spelling
prestes_pc$birdlife[rownames(prestes_pc) == "Cyanocompsa brissoni"] = "Cyanoloxia brissonii" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Poospiza lateralis"] = "Microspingus cabanisi" # synonym
prestes_pc$birdlife[rownames(prestes_pc) == "Spinus magellanica"] = "Spinus magellanicus" # spelling

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
prestes_pc$birdlife[which(is.na(match(prestes_pc$birdlife, spp_maps_prestes_pc)))]

# ATUALIZA O NOME DAS LINHAS COM O NOME CORRIGIDO DAS ESPECIES
rownames(prestes_pc) = prestes_pc$birdlife

# REMOVE A COLUNA birdlife
prestes_pc$birdlife = NULL

# ORDENA AS LINHAS ALFABETICAMENTE
prestes_pc = prestes_pc[order(rownames(prestes_pc)), ]

# ADICIONA O NOME DO DATASET
prestes_pc$datasetID = "Prestes2003pc"

# VISUALIZA A ESTRUTURA DOS DADOS
head(prestes_pc)


###############################################
### ORGANIZA OS DADOS DE MENDONCA-LIMA 2012 ###
###############################################

# URL OS DADOS
url = "https://raw.githubusercontent.com/buenoas/tree_plantations/main/unpublished_data_Mendonca-Lima2012.txt"

# IMPORTA OS DADOS
lima = read.table(url, sep = "\t", header = TRUE)

# MANTEM APENAS AS COLUNAS RELEVANTES
lima = lima[, c(2, 3, 4)]

# RENOMEIA AS COLUNAS
colnames(lima) = c("habitat", "especie", "individuos")

# REMOVE AS LINHAS EM BRANCO
lima = na.omit(lima)

# REMOVE AS LINHAS SEM IDENTIFICAO DAS AVES
lima = lima[-which(lima$especie == "2009"), ]
lima = lima[-which(lima$especie == "Picidae NI"), ]
lima = lima[-which(lima$especie == "Saltator sp."), ]

# REMOVE OS ESPACOS DESNECESSARIOS DO NOME DAS ESPECIES
lima$especie = str_squish(lima$especie)

# REMOVE AS LINHAS DOS HABITATS QUE NAO SAO DE INTERESSE
# PINUS MEIA IDADE SEM SUB-BOSQUE E PINUS ANTIGO SEM SUB-BOSQUE
lima = lima[-which(lima$habitat == "PM"), ]
lima = lima[-which(lima$habitat == "PV"), ]

# RENOMEIA O NOME DOS AMBIENTES
lima$habitat[lima$habitat == "MN"] = "natural_forest"
lima$habitat[lima$habitat == "AP"] = "araucaria_plantation"
lima$habitat[lima$habitat == "PS"] = "pine_plantation"

# VISUALIZA A ESTRUTURA DOS DADOS
head(lima)

# CONFERE O NOME DAS ESPECIES
# LISTA POTENCIAL DE ESPECIES FOI BASEADA NOS MAPAS DE DISTRIBUICAO DA BIRDLIFE
spp_maps_lima = spp_maps$species[spp_maps$Gateados == 1]

# COMPARA A LISTA DE ESPECIES REGISTRADAS COM A LISTA POTENCIAL DE ESPECIES
spp_lima = sort(unique(lima$especie))
spp_lima[which(is.na(match(spp_lima, spp_maps_lima)))]

# RENOMEIA AS ESPECIES NAO ENCONTRADAS CONFORME BIRDLIFE 2022
lima$especie[lima$especie == "Basileuterus culicivorus"] = "Basileuterus auricapilla" # distribution
lima$especie[lima$especie == "Basileuterus leucoblepharus"] = "Myiothlypis leucoblephara" # synonym
lima$especie[lima$especie == "Cyanocompsa brissonii"] = "Cyanoloxia brissonii" # synonym
lima$especie[lima$especie == "Myiodynastes maculatus"] = "Myiodynastes solitarius" # distribution
lima$especie[lima$especie == "Parula pitiayumi"] = "Setophaga pitiayumi" # synonym
lima$especie[lima$especie == "Poospiza cabanisi"] = "Microspingus cabanisi" # synonym
lima$especie[lima$especie == "Poospiza lateralis"] = "Microspingus cabanisi" # synonym
lima$especie[lima$especie == "Pyrrhocoma ruficeps"] = "Thlypopsis pyrrhocoma" # synonym
lima$especie[lima$especie == "Scytalopus notorius"] = "Scytalopus speluncae" # synonym
lima$especie[lima$especie == "Stephanohporus diadematus"] = "Stephanophorus diadematus" # spelling
lima$especie[lima$especie == "Stephanoxis lalandi"] = "Stephanoxis loddigesii" # distribution
lima$especie[lima$especie == "Troglodytes musculus"] = "Troglodytes aedon" # synonym
lima$especie[lima$especie == "Xenops rutilans"] = "Xenops rutilus" # synonym

# PRODUZ A MATRIZ DE ESPECIES POR HABITAT
lima = as.data.frame(tapply(lima$individuos,
                            list(lima$especie,
                                 lima$habitat), sum))

# CONVERTE NA EM ZERO
lima[is.na(lima)] = 0

# ORDENA AS COLUNAS
lima = lima[, c("natural_forest",
                "araucaria_plantation",
                "pine_plantation")]

# CONFERE SE TODOS OS NOMES ESTAO CORRETOS E OCORREM NA AREA DE ESTUDO
rownames(lima)[which(is.na(match(rownames(lima), spp_maps_lima)))]

# ORDENA AS LINHAS ALFABETICAMENTE
lima = lima[order(rownames(lima)), ]

# ADICIONA O NOME DO DATASET
lima$datasetID = "Mendonca-Lima2012"

# VISUALIZA A ESTRUTURA DOS DADOS
head(lima)


#################################
### COMBINA TODOS OS DATASETS ###
#################################

# Cria uma lista com todos os datasets
datasets = list(Amarante2023 = amarante,
                Fonseca2003 = fonseca,
                Mendonca_Lima2012 = lima,
                Prestes2003mn = prestes_mn,
                Prestes2003pc = prestes_pc,
                Rossi2015 = rossi,
                Volpato2010 = volpato,
                Zurita2006loc = zurita_local,
                Zurita2006reg = zurita_regional)

# Lista geral de especies
general_spp_list = sort(unique(do.call(c, lapply(datasets, function(x) rownames(x)))))

# Importa os dados de dependencia de floresta
forest_dependency = read.csv("https://raw.githubusercontent.com/buenoas/tree_plantations/main/forest_dependency.csv")

# Junta os dados dos datasets com a dependencia de floresta
datasets[[1]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[1]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[2]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[2]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[3]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[3]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[4]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[4]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[5]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[5]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[6]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[6]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[7]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[7]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[8]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[8]]),
                                                                            forest_dependency$Scientific.name)]
datasets[[9]]$forest_dependency = forest_dependency$Forest.dependency[match(rownames(datasets[[9]]),
                                                                            forest_dependency$Scientific.name)]

# ORGANIZA AS COLUNAS DOS DATASETS
datasets[[1]]$species = rownames(datasets[[1]])
datasets[[1]] = datasets[[1]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[1]]) = NULL

datasets[[2]]$species = rownames(datasets[[2]])
datasets[[2]] = datasets[[2]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[2]]) = NULL

datasets[[3]]$species = rownames(datasets[[3]])
datasets[[3]] = datasets[[3]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[3]]) = NULL

datasets[[4]]$species = rownames(datasets[[4]])
datasets[[4]] = datasets[[4]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[4]]) = NULL

datasets[[5]]$species = rownames(datasets[[5]])
datasets[[5]] = datasets[[5]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[5]]) = NULL

datasets[[6]]$species = rownames(datasets[[6]])
datasets[[6]] = datasets[[6]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[6]]) = NULL

datasets[[7]]$species = rownames(datasets[[7]])
datasets[[7]] = datasets[[7]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[7]]) = NULL

datasets[[8]]$species = rownames(datasets[[8]])
datasets[[8]] = datasets[[8]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[8]]) = NULL

datasets[[9]]$species = rownames(datasets[[9]])
datasets[[9]] = datasets[[9]][, c(6, 5, 1, 2, 3, 4)]
rownames(datasets[[9]]) = NULL

# SALVA OS DATASETS EM UM ARQUIVO UNICO
datasets_df = do.call(rbind, datasets)
rownames(datasets_df) = NULL
#write.table(datasets_df,
#            "tree_plantations_datasets.txt",
#            sep = "\t",
#            row.names = FALSE)


############################
### IMPORTA OS DATASETS ####
############################

#datasets = read.table("https://raw.githubusercontent.com/buenoas/tree_plantations/main/tree_plantations_datasets.txt",
#                      header = TRUE)


###################################
### CALCULA A RIQUEZA RAREFEITA ###
###################################

# TODAS AS ESPECIES

raref_list = list()

for (i in 1:length(datasets)) {
  
  x = datasets[[i]]
  rownames(x) = x$species
  x$species = NULL
  x$forest_dependency = NULL
  x$datasetID = NULL
  
  effort = min(c(max(colSums(x)),
                 min(colSums(x)) * 2))
  
  raref = estimateD(x,
                    q = 0,
                    datatype = "abundance",
                    base = "size",
                    level = effort,
                    nboot = 1000,
                    conf = 0.95)
  
  raref$qD.std = (raref$qD / raref[which(raref$Assemblage == "natural_forest"), "qD"]) - 1
  raref$qD.LCL.std = (raref$qD.LCL / raref[which(raref$Assemblage == "natural_forest"), "qD"]) - 1
  raref$qD.UCL.std = (raref$qD.UCL / raref[which(raref$Assemblage == "natural_forest"), "qD"]) - 1
  
  raref$datasetID = unique(datasets[[i]]$datasetID)
  
  raref_list[[i]] = raref
  
  print(i)
  
}

raref = do.call(rbind, raref_list)

# GRAFICO DA ANALISE DE RAREFACAO

# Ordena os estudos do que possui maior efeito negativo para o que possui maior efeito positivo do pinus
seq_datasets = subset(raref, Assemblage == "pine_plantation")
seq_assemblages = seq_datasets[order(-seq_datasets$qD.std), "datasetID"]

raref$datasetID = factor(raref$datasetID,
                         levels = seq_assemblages)
raref$Assemblage = factor(raref$Assemblage,
                          levels = c("pine_plantation",
                                     "araucaria_plantation",
                                     "natural_forest"))

# Produz o grafico

raref_graph_all =
  
  ggplot(raref,
         aes(x = qD.std * 100, y = datasetID, colour = Assemblage)) + 
  
  labs(x = "Species richness difference (%)",
       y = NULL,
       colour = NULL,
       title = "All birds") + 
  
  scale_x_continuous(limits = c(-60, 60),
                     breaks = c(-50, -25, 0, 25, 50)) +
  scale_colour_manual(labels = c("Pine Plantation",
                                 "Araucaria Plantation",
                                 "Natural Forest"),
                      values = c("#BF812D", "#812DBF", "#2DBF81")) +
  
  geom_stripped_rows(colour = FALSE) +
  geom_vline(xintercept = 0, linetype = "solid", size = 1/3, colour = "grey") +
  geom_vline(xintercept = c(-50, -25, 25, 50), linetype = "dashed", size = 1/3, colour = "grey") +
  geom_point(size = 2, position = position_dodge(0.6)) +
  geom_errorbar(aes(xmin = qD.LCL.std * 100, xmax = qD.UCL.std * 100),
                size = 1/3, width = 0, position = position_dodge(0.6)) + 
  
  theme_classic(base_size = 12) + 
  theme(legend.position = "bottom",
        axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks.x = element_blank(),
        axis.line.x = element_blank(),
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        plot.title = element_text(h = 0.5)) +
  guides(color = guide_legend(reverse = TRUE))

# Visualiza o grafico
raref_graph_all

# Salva o grafico
ggsave(raref_graph_all, filename = "raref_graph_size_all.pdf",
       w = 15, h = 15, units = "cm")


# ESPECIES FLORESTAIS

raref_list = list()

for (i in 1:length(datasets)) {
  
  x = datasets[[i]]
  
  # Seleciona apenas as especies florestais
  x = x[which(x$forest_dependency == "High" | x$forest_dependency == "Medium"), ]
  
  rownames(x) = x$species
  x$species = NULL
  x$forest_dependency = NULL
  x$datasetID = NULL
  
  effort = min(c(max(colSums(x)),
                 min(colSums(x)) * 2))
  
  raref = estimateD(x,
                    q = 0,
                    datatype = "abundance",
                    base = "size",
                    level = effort,
                    nboot = 1000,
                    conf = 0.95)
  
  raref$qD.std = (raref$qD / raref[which(raref$Assemblage == "natural_forest"), "qD"]) - 1
  raref$qD.LCL.std = (raref$qD.LCL / raref[which(raref$Assemblage == "natural_forest"), "qD"]) - 1
  raref$qD.UCL.std = (raref$qD.UCL / raref[which(raref$Assemblage == "natural_forest"), "qD"]) - 1
  
  raref$datasetID = unique(datasets[[i]]$datasetID)
  
  raref_list[[i]] = raref
  
  print(i)
  
}

raref = do.call(rbind, raref_list)

# GRAFICO DA ANALISE DE RAREFACAO

# Ordena os estudos do que possui maior efeito negativo para o que possui maior efeito positivo do pinus
seq_datasets = subset(raref, Assemblage == "pine_plantation")
seq_assemblages = seq_datasets[order(-seq_datasets$qD.std), "datasetID"]

raref$datasetID = factor(raref$datasetID,
                         levels = seq_assemblages)
raref$Assemblage = factor(raref$Assemblage,
                          levels = c("pine_plantation",
                                     "araucaria_plantation",
                                     "natural_forest"))

# Produz o grafico
raref_graph_forest =
  
  ggplot(raref,
         aes(x = qD.std * 100, y = datasetID, colour = Assemblage)) + 
  
  labs(x = "Species richness difference (%)",
       y = NULL,
       colour = NULL,
       title = "Forest birds") + 
  
  scale_x_continuous(limits = c(-60, 60),
                     breaks = c(-50, -25, 0, 25, 50)) +
  scale_colour_manual(labels = c("Pine Plantation",
                                 "Araucaria Plantation",
                                 "Natural Forest"),
                      values = c("#BF812D", "#812DBF", "#2DBF81")) +
  
  geom_stripped_rows(colour = FALSE) +
  geom_vline(xintercept = 0, linetype = "solid", size = 1/3, colour = "grey") +
  geom_vline(xintercept = c(-50, -25, 25, 50), linetype = "dashed", size = 1/3, colour = "grey") +
  geom_point(size = 2, position = position_dodge(0.6)) +
  geom_errorbar(aes(xmin = qD.LCL.std * 100, xmax = qD.UCL.std * 100),
                size = 1/3, width = 0, position = position_dodge(0.6)) + 
  
  theme_classic(base_size = 12) + 
  theme(legend.position = "bottom",
        axis.title = element_text(colour = "black"),
        axis.text = element_text(colour = "black"),
        axis.ticks.x = element_blank(),
        axis.line.x = element_blank(),
        axis.ticks.y = element_blank(),
        axis.line.y = element_blank(),
        plot.title = element_text(h = 0.5)) +
  guides(color = guide_legend(reverse = TRUE))

# Visualiza o grafico
raref_graph_forest

# Salva o grafico
ggsave(raref_graph_forest, filename = "raref_graph_size_forest.pdf",
       w = 15, h = 15, units = "cm")
